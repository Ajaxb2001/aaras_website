{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abashett\\\\foodaaras_blog\\\\aaras_website\\\\src\\\\components\\\\Recipes.js\";\nimport React from \"react\";\nimport \"../CSS/Recipes.css\"; // Make sure to create a corresponding CSS file for styling\n\n// Dummy array of YouTube Shorts URLs\n// Extract the video ID from each URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst videoIds = [\"bzYttrxG4eg\"\n// ... other video IDs\n];\nconst videoDescriptions = [\"Description for video 1\"\n// ... more descriptions\n];\nconst Recipes = () => {\n  // Helper function to extract video ID from YouTube Shorts URL\n  const extractVideoId = url => {\n    const urlObj = new URL(url);\n    const pathname = urlObj.pathname;\n    const shortsPrefix = \"/shorts/\";\n    if (pathname.startsWith(shortsPrefix)) {\n      return pathname.slice(shortsPrefix.length);\n    }\n    return url; // If it's not a shorts URL, return the whole string (this should be adjusted based on the actual URLs you have)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recipes-container\",\n    children: videoIds.map((videoId, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n        title: `YouTube Video ${index + 1}` // Unique title for each iframe\n        ,\n        src: `https://www.youtube.com/embed/${extractVideoId(videoId)}`,\n        frameBorder: \"0\",\n        allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullScreen: true,\n        className: \"video-iframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-description\",\n        children: [videoDescriptions[index], \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, videoId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c = Recipes;\nexport default Recipes;\nvar _c;\n$RefreshReg$(_c, \"Recipes\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","videoIds","videoDescriptions","Recipes","extractVideoId","url","urlObj","URL","pathname","shortsPrefix","startsWith","slice","length","className","children","map","videoId","index","title","src","frameBorder","allow","allowFullScreen","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/abashett/foodaaras_blog/aaras_website/src/components/Recipes.js"],"sourcesContent":["import React from \"react\";\r\nimport \"../CSS/Recipes.css\"; // Make sure to create a corresponding CSS file for styling\r\n\r\n// Dummy array of YouTube Shorts URLs\r\n// Extract the video ID from each URL\r\nconst videoIds = [\r\n  \"bzYttrxG4eg\",\r\n  // ... other video IDs\r\n];\r\n\r\nconst videoDescriptions = [\r\n  \"Description for video 1\",\r\n  // ... more descriptions\r\n];\r\n\r\nconst Recipes = () => {\r\n  // Helper function to extract video ID from YouTube Shorts URL\r\n  const extractVideoId = (url) => {\r\n    const urlObj = new URL(url);\r\n    const pathname = urlObj.pathname;\r\n    const shortsPrefix = \"/shorts/\";\r\n    if (pathname.startsWith(shortsPrefix)) {\r\n      return pathname.slice(shortsPrefix.length);\r\n    }\r\n    return url; // If it's not a shorts URL, return the whole string (this should be adjusted based on the actual URLs you have)\r\n  };\r\n\r\n  return (\r\n    <div className=\"recipes-container\">\r\n      {videoIds.map((videoId, index) => (\r\n        <div key={videoId} className=\"card\">\r\n          <iframe\r\n            title={`YouTube Video ${index + 1}`} // Unique title for each iframe\r\n            src={`https://www.youtube.com/embed/${extractVideoId(videoId)}`}\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen\r\n            className=\"video-iframe\"\r\n          ></iframe>\r\n          <div className=\"video-description\">\r\n            {videoDescriptions[index]} {/* Display the description text */}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipes;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,oBAAoB,CAAC,CAAC;;AAE7B;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAG,CACf;AACA;AAAA,CACD;AAED,MAAMC,iBAAiB,GAAG,CACxB;AACA;AAAA,CACD;AAED,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACpB;EACA,MAAMC,cAAc,GAAIC,GAAG,IAAK;IAC9B,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAACF,GAAG,CAAC;IAC3B,MAAMG,QAAQ,GAAGF,MAAM,CAACE,QAAQ;IAChC,MAAMC,YAAY,GAAG,UAAU;IAC/B,IAAID,QAAQ,CAACE,UAAU,CAACD,YAAY,CAAC,EAAE;MACrC,OAAOD,QAAQ,CAACG,KAAK,CAACF,YAAY,CAACG,MAAM,CAAC;IAC5C;IACA,OAAOP,GAAG,CAAC,CAAC;EACd,CAAC;EAED,oBACEL,OAAA;IAAKa,SAAS,EAAC,mBAAmB;IAAAC,QAAA,EAC/Bb,QAAQ,CAACc,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BjB,OAAA;MAAmBa,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACjCd,OAAA;QACEkB,KAAK,EAAG,iBAAgBD,KAAK,GAAG,CAAE,EAAE,CAAC;QAAA;QACrCE,GAAG,EAAG,iCAAgCf,cAAc,CAACY,OAAO,CAAE,EAAE;QAChEI,WAAW,EAAC,GAAG;QACfC,KAAK,EAAC,0FAA0F;QAChGC,eAAe;QACfT,SAAS,EAAC;MAAc;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CAAC,eACV1B,OAAA;QAAKa,SAAS,EAAC,mBAAmB;QAAAC,QAAA,GAC/BZ,iBAAiB,CAACe,KAAK,CAAC,EAAC,GAAC;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC;IAAA,GAXEV,OAAO;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAYZ,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GA/BIxB,OAAO;AAiCb,eAAeA,OAAO;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}